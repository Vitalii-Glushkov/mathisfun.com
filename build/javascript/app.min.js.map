{"version":3,"sources":["app.js","generator.js","panel.js","quizz.js","settings.js"],"names":["app","angular","module","factory","this","settingsServArray","getSettingsServArray","setSettingsServArray","array","generatorServObject","getGeneratorServObject","setGeneratorServObject","object","isReady","getReadinessServValue","setReadinessServValue","bool","controller","SettingsService","ReadinessService","GeneratorService","suitableExample","suitableExampleFlag","checkForSuitability","answer","_","isInteger","generateExampleAndAnswer","operation","exampleFirstOperator","random","exampleSecondOperator","suitableExampleAnswer","add","mathExpression","correctAnswer","subtract","multiply","divide","generateExampleRandom","userMathOperationSet","userMathOperationSetRandomised","shuffle","typeOfGeneratedExample","head","tab","selectTab","setTab","isSelected","checkTab","$scope","question","correctAnswerCounter","wrongAnswerCounter","checkIsReady","userQuizzExprObj","questionInputEnabled","viewTheQuestion","inputValidation","answ","numberCheck","toNumber","isNaN","$","css","integerCheck","checkTheAnswer","getNextExample","attr","mathOperationSet","isAddition","isSubtraction","isMultiplication","isDivision","checkForEmptiness","userSet","isEmpty","addMathOperation","defaults","i","operationIsTrueTemp","findKey","o","concat","omit"],"mappings":"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","file":"app.min.js","sourcesContent":["/**\r\n * Services definitions logics module\r\n */\r\n(function () {\r\n\tvar app = angular.module('math', ['math-panel', 'math-settings', 'math-generator', 'math-quizz']);\r\n\r\n  /**\r\n   * Settings Service is used to make user's settings available through application's modules \r\n   */\r\n\tapp.factory('SettingsService', function() {\r\n\t\tthis.settingsServArray = [];\r\n\r\n  \treturn {\r\n      /**\r\n       * Used to get the array of Settings values\r\n       * @return {Array} Array of Settings values {type Object}\r\n       */\r\n  \t\tgetSettingsServArray: function () {\r\n            return this.settingsServArray;\r\n        },\r\n      /**\r\n       * Used to assign Settings values to the Service's local variable\r\n       * @param {Array} array Array of Settings values\r\n       */\r\n      setSettingsServArray: function (array) {\r\n          this.settingsServArray = array;\r\n      }\r\n  \t};\r\n\t});\r\n\r\n  /**\r\n   * Generator Service is used to generate example object and to make it available through application's modules \r\n   */\r\n  app.factory('GeneratorService', function() {\r\n    this.generatorServObject = {};\r\n\r\n    return {\r\n      /**\r\n       * Used to get the example object\r\n       * @return {Object} Example object\r\n       */\r\n      getGeneratorServObject: function () {\r\n            return this.generatorServObject;\r\n        },\r\n      /**\r\n       * Used to assign example object to the Service's local variable\r\n       * @param {Object} object Example object\r\n       */\r\n      setGeneratorServObject: function (object) {\r\n          this.generatorServObject = object;\r\n      }\r\n    };\r\n  });\r\n\r\n  /**\r\n   * Readiness Service is used to make the readiness flag available through applications modules\r\n   */\r\n\tapp.factory('ReadinessService', function() {\r\n\t\tthis.isReady = false;\r\n\r\n  \treturn {\r\n      /**\r\n       * Used to get the readiness flag\r\n       * @return {Boolean} The readiness flag value\r\n       */\r\n  \t\tgetReadinessServValue: function () {\r\n            return this.isReady;\r\n        },\r\n      /**\r\n       * Used to set the readiness flag\r\n       * @param {Boolean} bool The flag value setting\r\n       */\r\n      setReadinessServValue: function (bool) {\r\n          this.isReady = bool;\r\n      }\r\n  \t};\r\n\t});\r\n})();","/**\r\n * Example Generator logics module\r\n */\r\n(function () {\r\n\tangular.module('math-generator', [])\r\n\r\n\t/**\r\n   * Generator Controller is used to generate math example according to user settings and to share it over the application as an array\r\n   */\r\n\t.controller('GeneratorController', ['SettingsService', 'ReadinessService', 'GeneratorService', function(SettingsService, ReadinessService, GeneratorService) {\r\n\t\tthis.suitableExample;\r\n\t\tthis.suitableExampleFlag;\r\n\r\n\t\t/**\r\n\t\t * Used to check whether the answer is suitable according to the task restrictions\r\n\t\t * @param  {Number} answer Answer value to check\r\n\t\t */\r\n\t\tthis.checkForSuitability = function(answer) {\r\n\t\t\tif (_.isInteger(answer) && answer <= 100 && answer >= 1) {\r\n\t\t\t\t\t\tthis.suitableExampleFlag = false;\r\n\t\t\t\t\t\tReadinessService.setReadinessServValue(true);\r\n\t\t\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Used to generate an example and the answer for it\r\n\t\t * @param  {String} operation Type of the mathematical operation\r\n\t\t */\r\n\t\tthis.generateExampleAndAnswer = function (operation) {\r\n\t\t\t\twhile (this.suitableExampleFlag) {\r\n\t\t\t\t\tthis.exampleFirstOperator = _.random(1, 100);\r\n\t\t\t\t\tthis.exampleSecondOperator = _.random(1, 100);\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (operation == \"isAddition\") {\r\n\t\t\t\t\t\tthis.suitableExampleAnswer = _.add(this.exampleFirstOperator, this.exampleSecondOperator);\r\n\t\t\t\t\t\tthis.suitableExample = {\"mathExpression\": this.exampleFirstOperator + \" + \" + this.exampleSecondOperator + \" = \", \"correctAnswer\": this.suitableExampleAnswer};\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (operation == \"isSubtraction\") {\r\n\t\t\t\t\t\tthis.suitableExampleAnswer = _.subtract(this.exampleFirstOperator, this.exampleSecondOperator); \r\n\t\t\t\t\t\tthis.suitableExample = {\"mathExpression\": this.exampleFirstOperator + \" - \" + this.exampleSecondOperator + \" = \", \"correctAnswer\": this.suitableExampleAnswer};\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (operation == \"isMultiplication\") {\r\n\t\t\t\t\t\tthis.suitableExampleAnswer = _.multiply(this.exampleFirstOperator, this.exampleSecondOperator);\r\n\t\t\t\t\t\tthis.suitableExample = {\"mathExpression\": this.exampleFirstOperator + \" x \" + this.exampleSecondOperator + \" = \", \"correctAnswer\": this.suitableExampleAnswer};\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (operation == \"isDivision\") {\r\n\t\t\t\t\t\tthis.suitableExampleAnswer = _.divide(this.exampleFirstOperator, this.exampleSecondOperator);\r\n\t\t\t\t\t\tthis.suitableExample = {\"mathExpression\": this.exampleFirstOperator + \" / \" + this.exampleSecondOperator + \" = \", \"correctAnswer\": this.suitableExampleAnswer};\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse { return false; }\r\n\t\t\t\t\t\r\n\t\t\t\t\t\tthis.checkForSuitability(this.suitableExampleAnswer);\r\n\t\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Used to randomly generate an example\r\n\t\t * @return {Boolean} Used to bind the functions logically\r\n\t\t */\r\n\t\tthis.generateExampleRandom = function () {\r\n\t\t\tReadinessService.setReadinessServValue(false);\r\n\t\t\tthis.userMathOperationSet = SettingsService.getSettingsServArray();\r\n\t\t\t// console.log(_.isEmpty(this.userMathOperationSet));\r\n\t\t\t// if (_.isEmpty(this.userMathOperationSet)) { return false; }\r\n\t\t\t// console.log(\"after\");\r\n\t\t\tthis.suitableExampleFlag = true;\r\n\r\n\t\t\tthis.userMathOperationSetRandomised = _.shuffle(this.userMathOperationSet);\r\n\t\t\tthis.typeOfGeneratedExample = _.head(this.userMathOperationSetRandomised);\r\n\t\t\tthis.generateExampleAndAnswer(this.typeOfGeneratedExample);\r\n\t\t\t\r\n\t\t\tGeneratorService.setGeneratorServObject(this.suitableExample);\r\n\t\t\treturn true;\r\n\t\t};\r\n\t}]);\r\n})();","/**\r\n * Panels processing logics module\r\n */\r\n(function () {\r\n\tangular.module('math-panel', [])\r\n\r\n\t /**\r\n   * Panel Controller is used to organise tabs controll code \r\n   */\r\n\t.controller('PanelController', function() {\r\n\t\tthis.tab = 1;\r\n\r\n    /**\r\n     * Used to switch between the tabs\r\n     * @param  {Number} setTab Value that is used to switch between the tabs\r\n     */\r\n\t\tthis.selectTab = function(setTab) {\r\n\t\t\tthis.tab = setTab;\r\n\t\t};\r\n\r\n    /**\r\n     * Used to mark tab as selected\r\n     * @param  {Number}  checkTab Tab selection indicator\r\n     * @return {Boolean}          Value used to mark tab as selected \r\n     */\r\n\t\tthis.isSelected = function(checkTab) {\r\n\t\t\treturn this.tab === checkTab;\r\n\t\t};\r\n\t});\r\n})();","/**\r\n * Quizz Controller logics module\r\n */\r\n(function () {\r\n\tangular.module('math-quizz', [])\r\n\r\n\t /**\r\n   * Quizz Controller is used to process the Quizz tab events\r\n   */\r\n\t.controller('QuizzController', ['$scope', 'ReadinessService', 'GeneratorService', function ($scope, ReadinessService, GeneratorService) {\r\n\t\t$scope.question;\r\n\t\tthis.answer;\r\n\t\tthis.correctAnswer = 0;\r\n\t\t$scope.correctAnswerCounter = 0;\r\n\t\t$scope.wrongAnswerCounter = 0;\r\n\r\n\t\t/**\r\n\t\t * Used to check the settings and the example readiness\r\n\t\t * @return {Boolean} Used to bind functions logically\r\n\t\t */\r\n\t\tthis.checkIsReady = function() {\r\n\t\t\tthis.answer = null;\r\n\t\t\tthis.correctAnswer = 0;\r\n\t\t\t$scope.correctAnswerCounter = 0;\r\n\t\t\t$scope.wrongAnswerCounter = 0;\r\n\t\t\t\r\n\t\t\tthis.isReady = ReadinessService.getReadinessServValue();\r\n\r\n\t\t\tif (this.isReady) {\r\n\t\t\t\tthis.userQuizzExprObj = GeneratorService.getGeneratorServObject();\r\n\t\t\t\tthis.questionInputEnabled();\r\n\t\t\t\tthis.viewTheQuestion();\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Used to view the next question\r\n\t\t */\r\n\t\tthis.viewTheQuestion = function() {\r\n\t\t\t$scope.question = this.userQuizzExprObj[\"mathExpression\"];\r\n\t\t\tthis.correctAnswer = this.userQuizzExprObj[\"correctAnswer\"];\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Used to check the answer according to the list of criterias: is a number, is an integer, less than or equal to 100 and greater than 0\r\n\t\t * @param  {Number or String[IE9]} answ User's answer\r\n\t\t * @return {Boolean}      If all the conditions are true then the returned value is true\r\n\t\t */\r\n\t\tthis.inputValidation = function(answ) {\r\n\t\t\tthis.numberCheck = _.toNumber(answ);\r\n\t\t\tif ( _.isNaN(this.numberCheck) ) {\r\n\t\t\t\t$(\"#focusedInput\").css(\"border-color\", \"#e9322d\");\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tthis.integerCheck = _.isInteger(this.numberCheck);\r\n\t\t\tif (!this.integerCheck) {\r\n\t\t\t\t$(\"#focusedInput\").css(\"border-color\", \"#e9322d\");\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tif (answ <= 0 || answ > 100) {\r\n\t\t\t\t$(\"#focusedInput\").css(\"border-color\", \"#e9322d\");\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Used to count the number of the correct/wrong answers\r\n\t\t * @return {Boolean} Used to bind functions logically\r\n\t\t */\r\n\t\tthis.checkTheAnswer = function() {\r\n\t\t\tif ( this.inputValidation(this.answer) ) {\r\n\t\t\t\t$(\"#focusedInput\").css(\"border-color\", \"rgba(82,168,236,0.8)\");\r\n\t\t\t\tif (this.answer == this.correctAnswer) { $scope.correctAnswerCounter++; }\r\n\t\t\t\telse { $scope.wrongAnswerCounter++; }\r\n\r\n\t\t\t\tthis.answer = null;\r\n\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\telse { return false; }\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Used to get the next example\r\n\t\t */\r\n\t\tthis.getNextExample = function() {\r\n\t\t\tthis.userQuizzExprObj = GeneratorService.getGeneratorServObject();\r\n\t\t\tthis.viewTheQuestion();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Used to enable the user's input field\r\n\t\t */\r\n\t\tthis.questionInputEnabled = function() {\r\n\t\t\t$(\".form-control\").attr(\"disabled\", false);\r\n\t\t};\r\n\t}]);\r\n})();","/**\r\n * Settings logics module\r\n */\r\n(function () {\r\n\tangular.module('math-settings', [])\r\n\r\n\t/**\r\n   * Settings Controller is used to process User's settings selection\r\n   */\r\n\t.controller('SettingsController', ['SettingsService', 'ReadinessService', function(SettingsService, ReadinessService) {\r\n\t\tthis.mathOperationSet = {};\r\n\t\tthis.isAddition = false;\r\n\t\tthis.isSubtraction = false;\r\n\t\tthis.isMultiplication = false;\r\n\t\tthis.isDivision = false;\r\n\r\n\t\t/**\r\n\t\t * Used as the readiness check before sharing the array of settings values and the readiness flag\r\n\t\t */\r\n\t\tthis.checkForEmptiness = function(userSet) {\r\n\t\t\tif ( !_.isEmpty(userSet) ) {\r\n\t\t\t\tSettingsService.setSettingsServArray(userSet);\r\n\t\t\t\tReadinessService.setReadinessServValue(true);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Used to process User's settings selection and to set the array of settings values and the readiness flag\r\n\t\t */\r\n\t\tthis.addMathOperation = function () {\r\n\t\t\tthis.mathOperationSet = _.defaults({\"isAddition\": this.isAddition, \"isSubtraction\": this.isSubtraction, \"isMultiplication\": this.isMultiplication, \"isDivision\": this.isDivision});\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * This block of code is used to process User's math operation set object and to save the object's properties equal to [true] into the this.userMathOperationSet array\r\n\t\t\t */\r\n\t\t\tthis.userMathOperationSet = [];\r\n\t\t\tfor (var i = 0; i < 4; i++) {\r\n\t\t\t\tthis.operationIsTrueTemp = _.findKey(this.mathOperationSet, function(o) { return o === true; });\r\n\t\t\t\tif (this.operationIsTrueTemp) { this.userMathOperationSet = _.concat(this.userMathOperationSet, this.operationIsTrueTemp); }\r\n\t\t\t\tthis.mathOperationSet = _.omit(this.mathOperationSet, [this.operationIsTrueTemp]);\r\n\t\t\t}\r\n\r\n\t\t\tthis.checkForEmptiness(this.userMathOperationSet);\r\n\t\t};\r\n\t}]);\r\n})();"],"sourceRoot":"/source/"}